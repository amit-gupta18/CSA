// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  name           String
  email          String      @unique
  password       String
  dob            DateTime?
  educationLevel EducationLevel
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  interests      Interest[]
  quizzes        Quiz[]
  skills         Skill[]
  progressLogs   ProgressLog[]
  resumes        Resume[]
}

enum EducationLevel {
  SCHOOL
  HIGHER_EDUCATION
}

// ------------------- Interest & Quiz -------------------

model Interest {
  id       String   @id @default(uuid())
  name     String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  quizzes  Quiz[]
}

model Quiz {
  id        String   @id @default(uuid())
  title     String
  questions Question[]
  interest  Interest @relation(fields: [interestId], references: [id])
  interestId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Question {
  id       String   @id @default(uuid())
  text     String
  options  String[]   
  answer   String?    
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   String
}

// ------------------- Skills & Mapping -------------------

model Skill {
  id          String      @id @default(uuid())
  name        String
  level       Int         
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  skillGaps   SkillGap[]
}

model SkillGap {
  id        String   @id @default(uuid())
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  gapDesc   String   
  resources String[] 
}

// ------------------- Progress Tracking -------------------

model ProgressLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime @default(now())
  activity  String   
  progress  Int      
}


model Resume {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  title      String   
  content    Json     
  score      Int?     
  feedback   String?  
  createdAt  DateTime @default(now())
}
