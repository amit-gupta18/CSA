generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(cuid())
  email          String              @unique
  password       String
  educationlevel EducationLevel
  name           String?
  branch         String?
  year           Int?
  cgpa           Decimal?            @db.Decimal(3, 2)
  preferences    Json?
  createdAt      DateTime            @default(now())
  achievements   AchievementOnUser[]
  goals          Goal[]
  projects       Project[]
  skills         SkillOnUser[]
  streaks        Streak[]
  subjects       SubjectOnUser[]
  tasks          Task[]
}

model Skill {
  id         String     @id @default(cuid())
  name       String     @unique
  category   String
  levelOrder Int
  resources  Resource[] @relation("ResourceToSkill")
  Skill_A    Skill[]    @relation("SkillHierarchy")
  Skill_B    Skill[]    @relation("SkillHierarchy")
}

model SkillOnUser {
  id         String   @id @default(cuid())
  userId     String
  skillId    String
  level      Int
  confidence Int
  evidence   Json?
  updatedAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, skillId])
}

model Goal {
  id        String   @id @default(cuid())
  userId    String
  type      String
  target    Json
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Subject {
  id       String  @id @default(cuid())
  name     String
  code     String?
  semester Int
}

model SubjectOnUser {
  id        String  @id @default(cuid())
  userId    String
  subjectId String
  progress  Int
  grade     String?
  User      User    @relation(fields: [userId], references: [id])
}

model Project {
  id         String      @id @default(cuid())
  userId     String
  title      String
  summary    String?
  repoUrl    String?
  tags       String[]
  progress   Int
  milestones Milestone[]
  User       User        @relation(fields: [userId], references: [id])
}

model Milestone {
  id        String    @id @default(cuid())
  projectId String
  title     String
  dueDate   DateTime?
  status    String
  Project   Project   @relation(fields: [projectId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  subjectId   String?
  projectId   String?
  dueDate     DateTime?
  status      String
  priority    Int
  User        User      @relation(fields: [userId], references: [id])
}

model Resource {
  id     String   @id @default(cuid())
  title  String
  url    String
  type   String
  tags   String[]
  rating Float?
  skills Skill[]  @relation("ResourceToSkill")
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  days      Int
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id     String @id @default(cuid())
  code   String @unique
  name   String
  points Int
}

model AchievementOnUser {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id])
}

enum EducationLevel {
  SCHOOL
  HIGHER_EDUCATION
}
