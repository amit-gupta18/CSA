// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  password         String
  educationlevel   EducationLevel      
  name             String?
  branch           String?
  year             Int?
  cgpa             Decimal?            @db.Decimal(3, 2)
  skills           SkillOnUser[]
  goals            Goal[]
  projects         Project[]
  subjects         SubjectOnUser[]
  tasks            Task[]
  streaks          Streak[]
  achievements     AchievementOnUser[]
  preferences      Json?
  createdAt        DateTime            @default(now())
}

enum EducationLevel {
  SCHOOL
  HIGHER_EDUCATION
}

model Skill {
  id         String     @id @default(cuid())
  name       String     @unique
  category   String // e.g., "DSA", "Web-Frontend", "Cloud"
  levelOrder Int // for roadmap tiering
  parents    Skill[]    @relation("SkillHierarchy")
  children   Skill[]    @relation("SkillHierarchy")
  resources  Resource[]
}

model SkillOnUser {
  id         String   @id @default(cuid())
  userId     String
  skillId    String
  level      Int // 0-5 (Noviceâ†’Expert)
  confidence Int // 0-100 self-reported
  evidence   Json? // links, submissions, quiz scores
  updatedAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, skillId])
}

model Goal {
  id        String   @id @default(cuid())
  userId    String
  type      String // "internship", "placement", "higher-edu"
  target    Json // e.g., {role: "SDE", companies:["GSoC","MAANG"], deadline: "2025-12-31"}
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Subject {
  id       String  @id @default(cuid())
  name     String
  code     String?
  semester Int
}

model SubjectOnUser {
  id        String  @id @default(cuid())
  userId    String
  subjectId String
  progress  Int // 0-100
  grade     String? // e.g., A/B/C
  User      User    @relation(fields: [userId], references: [id])
}

model Project {
  id         String      @id @default(cuid())
  userId     String
  title      String
  summary    String?
  repoUrl    String?
  tags       String[]
  progress   Int // 0-100
  milestones Milestone[]
  User       User        @relation(fields: [userId], references: [id])
}

model Milestone {
  id        String    @id @default(cuid())
  projectId String
  title     String
  dueDate   DateTime?
  status    String // todo, doing, done
  Project   Project   @relation(fields: [projectId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  subjectId   String?
  projectId   String?
  dueDate     DateTime?
  status      String // todo, doing, done
  priority    Int // 1-5
  User        User      @relation(fields: [userId], references: [id])
}

model Resource {
  id     String   @id @default(cuid())
  title  String
  url    String
  type   String // video, article, course, question-set
  tags   String[]
  skills Skill[]
  rating Float? // community
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  kind      String // dsa, subject, project, habit
  days      Int // continuous
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id     String @id @default(cuid())
  code   String @unique // e.g., "DSA_30_STREAK"
  name   String
  points Int
}

model AchievementOnUser {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id])
}
